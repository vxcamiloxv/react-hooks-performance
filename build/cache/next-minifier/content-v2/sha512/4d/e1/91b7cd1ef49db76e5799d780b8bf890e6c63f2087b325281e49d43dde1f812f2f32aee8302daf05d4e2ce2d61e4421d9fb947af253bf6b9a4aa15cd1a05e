{"code":"_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[8],{XLER:function(e,o){throw new Error('Module build failed (from ./node_modules/next/dist/build/webpack/loaders/next-babel-loader.js):\\nError: Caching was left unconfigured. Babel\\'s plugins, presets, and .babelrc.js files can be configured\\nfor various types of caching, using the first param of their handler functions:\\n\\nmodule.exports = function(api) {\\n  // The API exposes the following:\\n\\n  // Cache the returned value forever and don\\'t call this function again.\\n  api.cache(true);\\n\\n  // Don\\'t cache at all. Not recommended because it will be very slow.\\n  api.cache(false);\\n\\n  // Cached based on the value of some function. If this function returns a value different from\\n  // a previously-encountered value, the plugins will re-evaluate.\\n  var env = api.cache(() => process.env.NODE_ENV);\\n\\n  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for\\n  // any possible NODE_ENV value that might come up during plugin execution.\\n  var isProd = api.cache(() => process.env.NODE_ENV === \"production\");\\n\\n  // .cache(fn) will perform a linear search though instances to find the matching plugin based\\n  // based on previous instantiated plugins. If you want to recreate the plugin and discard the\\n  // previous instance whenever something changes, you may use:\\n  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === \"production\");\\n\\n  // Note, we also expose the following more-verbose versions of the above examples:\\n  api.cache.forever(); // api.cache(true)\\n  api.cache.never();   // api.cache(false)\\n  api.cache.using(fn); // api.cache(fn)\\n\\n  // Return the value that will be cached.\\n  return { };\\n};\\n    at throwConfigError (/Users/rogomez/Documents/webApp/react-hooks-performance/node_modules/@babel/core/lib/config/files/configuration.js:280:9)\\n    at /Users/rogomez/Documents/webApp/react-hooks-performance/node_modules/@babel/core/lib/config/files/configuration.js:204:30\\n    at cachedFunction (/Users/rogomez/Documents/webApp/react-hooks-performance/node_modules/@babel/core/lib/config/caching.js:32:19)\\n    at readConfig (/Users/rogomez/Documents/webApp/react-hooks-performance/node_modules/@babel/core/lib/config/files/configuration.js:164:44)\\n    at /Users/rogomez/Documents/webApp/react-hooks-performance/node_modules/@babel/core/lib/config/files/configuration.js:130:20\\n    at Array.reduce (<anonymous>)\\n    at loadOneConfig (/Users/rogomez/Documents/webApp/react-hooks-performance/node_modules/@babel/core/lib/config/files/configuration.js:127:24)\\n    at findRootConfig (/Users/rogomez/Documents/webApp/react-hooks-performance/node_modules/@babel/core/lib/config/files/configuration.js:123:10)\\n    at buildRootChain (/Users/rogomez/Documents/webApp/react-hooks-performance/node_modules/@babel/core/lib/config/config-chain.js:78:44)\\n    at loadPrivatePartialConfig (/Users/rogomez/Documents/webApp/react-hooks-performance/node_modules/@babel/core/lib/config/partial.js:85:55)')}},[[\"XLER\",0]]]);","extractedComments":[]}